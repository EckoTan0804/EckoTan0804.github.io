[{"authors":["admin"],"categories":null,"content":"","date":1594080000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1594080000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://eckotan0804.github.io/author/haobin-tan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/haobin-tan/","section":"authors","summary":"","tags":null,"title":"Haobin Tan","type":"authors"},{"authors":null,"categories":null,"content":"","date":1593993600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1593993600,"objectID":"ba742626ac63643fb3a92981ae3514d0","permalink":"https://eckotan0804.github.io/notes/machine-learning/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/machine-learning/","section":"notes","summary":"","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;]. s\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://eckotan0804.github.io/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"","date":1593993600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1593993600,"objectID":"dbc4a84541bb3d3e237e3cd95cd22a55","permalink":"https://eckotan0804.github.io/notes/deep-learning/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/deep-learning/","section":"notes","summary":"","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"","date":1593993600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1593993600,"objectID":"74fbfe3e4ebff2e5fcbe5d781bc4e24e","permalink":"https://eckotan0804.github.io/notes/computer-vision/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/computer-vision/","section":"notes","summary":"","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"","date":1593993600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1593993600,"objectID":"5188a81428903bd3556eeb80485fbb6c","permalink":"https://eckotan0804.github.io/notes/natural-language-processing/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/natural-language-processing/","section":"notes","summary":"","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Source This is the summary of the book \u0026ldquo;A Whirlwind Tour of Python\u0026rdquo; by Jake VanderPlas.\nYou can view it in\n nbviewer: A whirlwind Tour of Python, or Github: A whirlwind Tour of Python  import this  The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!  Operators Identity and Membership The identity operators, is and is not check for object identity. Object identity is different than equality.\na = [1, 2, 3] b = [1, 2, 3]  a == b  True  a is b  False  1 in a  True  4 in a  False  Built-in Types Python\u0026rsquo;s simple types:\n   Type Example Description     int x = 1 integers (i.e., whole numbers)   float x = 1.0 floating-point numbers (i.e., real numbers)   complex x = 1 + 2j Complex numbers (i.e., numbers with real and imaginary part)   bool x = True Boolean: True/False values   str x = 'abc' String: characters or text   NoneType x = None Special object indicating nulls    Complex Numbers complex(1, 2)  (1+2j)  Alternatively, we can use the \u0026ldquo;j\u0026rdquo; suffix in expressions to indicate the imaginary part:\n1 + 2j  (1+2j)  c = 3 + 4j  c.real  3.0  c.imag  4.0  c.conjugate()  (3-4j)  abs(c)  5.0  String Type msg = \u0026quot;what do you like?\u0026quot; # double quotes response = 'spam' # single quotes  # length len(response)  4  # Upper/lower case response.upper()  'SPAM'  # Capitalize, see also str.title() msg.capitalize()  'What do you like?'  # concatenation with + msg + response  'what do you like?spam'  # multiplication is multiple concatenation 5 * response  'spamspamspamspamspam'  # Access individual characters (zero-based (list) indexing)  msg[0]  'w'  None Type Most commonly used as the default return value of a function\ntype(None)  NoneType  ret_val = print(\u0026quot;abc\u0026quot;)  abc  print(ret_val)  None  Likewise, any function in Python with no return value is, in reality, returning None.\nBoolean Booleans can also be constructed using the bool() object constructor: values of any other type can be converted to Boolean via predictable rules\n  any numeric type is False if equal to zero, and True otherwise\n  The Boolean conversion of None is always False\n  For strings, bool(s) is False for empty strings and True otherwise\n  For sequences, the Boolean representation is False for empty sequences and True for any other sequences\n  # numeric type bool(0)  False  bool(1)  True  a = 0 if not a: print(\u0026quot;a\u0026quot;)  a  bool(None)  False  bool(\u0026quot;\u0026quot;)  False  bool(\u0026quot;Hello World!\u0026quot;)  True  bool([])  False  bool([1])  True  l_1 = [1, 2, 3] l_2 = [] def is_empty(l): if l: print(\u0026quot;not empty\u0026quot;) return False else: print(\u0026quot;empty\u0026quot;) return True  is_empty([1, 2, 3])  not empty False  is_empty([])  empty True  Built-In Data Structures    Type Name Example Description     list [1, 2, 3] Ordered collection   tuple (1, 2, 3) Immutable ordered collection   dict {'a':1, 'b':2, 'c':3} Unordered (key,value) mapping   set {1, 2, 3} Unordered collection of unique values    Defining and Using Functions *args and **kwargs Write a function in which we don\u0026rsquo;t initially know how many arguments the user will pass.\n  *args:\n  * before a variable means \u0026ldquo;expand this as a sequence\u0026rdquo;\n  args is short for \u0026ldquo;arguments\u0026rdquo;\n    **kwargs\n  ** before a variable means \u0026ldquo;expand this as a dictionary\u0026rdquo;\n  kwargs is short for \u0026ldquo;keyword arguments\u0026rdquo;\n    def catch_all(*args, **kwargs): print(\u0026quot;args = \u0026quot;, args) print(\u0026quot;kwargs = \u0026quot;, kwargs)  catch_all(1, 2, 3, a=4, b=5)  args = (1, 2, 3) kwargs = {'a': 4, 'b': 5}  inputs = (1, 2, 3) keywords = {\u0026quot;one\u0026quot;: 1, \u0026quot;two\u0026quot;: 2} catch_all(*inputs, **keywords)  args = (1, 2, 3) kwargs = {'one': 1, 'two': 2}  Iterators enumerate \u0026ldquo;Pythonic\u0026rdquo; way to enumerate the indices and values in a list.\nl = [2, 4, 6, 8, 10] for i, val in enumerate(l): print(\u0026quot;index: {}, value: {}\u0026quot;.format(i, val))  index: 0, value: 2 index: 1, value: 4 index: 2, value: 6 index: 3, value: 8 index: 4, value: 10  zip Iterate over multiple lists simultaneously\nL = [1, 3, 5, 7, 9] R = [2, 4, 6, 8, 10] for l_val, r_val in zip(L, R): print(\u0026quot;L: {}, R: {}\u0026quot;.format(l_val, r_val))  L: 1, R: 2 L: 3, R: 4 L: 5, R: 6 L: 7, R: 8 L: 9, R: 10  for i, val in enumerate(zip(L, R)): print(\u0026quot;Index: {}, L: {}, R: {}\u0026quot;.format(i, val[0], val[1]))  Index: 0, L: 1, R: 2 Index: 1, L: 3, R: 4 Index: 2, L: 5, R: 6 Index: 3, L: 7, R: 8 Index: 4, L: 9, R: 10  map and filter map: takes a function and applies it to the values in an iterator\nfunc = lambda x: x + 1 l = [1, 2, 3, 4, 5]  list(map(func, l))  [2, 3, 4, 5, 6]  filter: only passes-through values for which the filter function evaluates to True\nis_even = lambda x: x % 2 == 0 list(filter(is_even, l))  [2, 4]  Iterators as function arguments It turns out that the *args syntax works not just with sequences, but with any iterator:\nprint(*range(5))  0 1 2 3 4  list(range(3))  [0, 1, 2]  print(*map(lambda x: x + 1, range(3)))  1 2 3  L1 = [1, 2, 3, 4] L2 = [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;] z = zip(L1, L2) print(*z)  (1, 'a') (2, 'b') (3, 'c') (4, 'd')  z = zip(L1, L2) new_L1, new_L2 = zip(*z) new_L1  (1, 2, 3, 4)  new_L2  ('a', 'b', 'c', 'd')  Specialized Iterators: itertools from itertools import permutations p = permutations(range(3)) print(*p)  (0, 1, 2) (0, 2, 1) (1, 0, 2) (1, 2, 0) (2, 0, 1) (2, 1, 0)  p  \u0026lt;itertools.permutations at 0x10fb32710\u0026gt;  List Comprehensions l = [1, 2, 3, 4, 5]  [2 * el for el in l if el \u0026gt; 3]  [8, 10]  which is equivalent to the loop syntax, but list comprehension is much easier to write and to understand!\nL = [] for el in l: if el \u0026gt; 3: L.append(2 * el) L  [8, 10]  [(i, j) for i in range(2) for j in range(3)]  [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]  print(*range(10)) # Leave out multiples of 3, and negate all multiples of 2 [val if val % 2 else -val for val in range(10) if val % 3]  0 1 2 3 4 5 6 7 8 9 [1, -2, -4, 5, 7, -8]  L = [] for val in range(10): if val % 3 != 0: # conditional on iterator # conditional on value if val % 2 != 0: L.append(val) else: L.append(-val) L  [1, -2, -4, 5, 7, -8]  {n * 2 for n in range(5)}  {0, 2, 4, 6, 8}  {a % 3 for a in range(100)}  {0, 1, 2}  Generators Difference between list comprehensions and generator expressions:\nList comprehensions use square brackets, while generator expressions use parentheses # list comprehension: [n * 2 for n in range(5)]  [0, 2, 4, 6, 8]  # generator g = (n * 2 for n in range(5)) list(g)  [0, 2, 4, 6, 8]  A list is a collection of values, while a generator is a recipe for producing values When you create a list, you are actually building a collection of values, and there is some memory cost associated with that.\nWhen you create a generator, you are not building a collection of values, but a recipe for producing those values.\nBoth expose the same iterator interface.\nl = [n * 2 for n in range(5)] for val in l: print(val, end=\u0026quot; \u0026quot;)  0 2 4 6 8  g = g = (n * 2 for n in range(5)) for val in g: print(val, end=\u0026quot; \u0026quot;)  0 2 4 6 8  The difference is that a generator expression does not actually compute the values until they are needed. This not only leads to memory efficiency, but to computational efficiency as well! This also means that while the size of a list is limited by available memory, the size of a generator expression is unlimited!\nA list can be iterated multiple times; a generator expression is single-use l = [n * 2 for n in range(5)] for val in l: print(val, end=\u0026quot; \u0026quot;) print(\u0026quot;\\n\u0026quot;) for val in l: print(val, end=\u0026quot; \u0026quot;)  0 2 4 6 8 0 2 4 6 8  g = g = (n * 2 for n in range(5)) list(g)  [0, 2, 4, 6, 8]  list(g)  []  This can be very useful because it means iteration can be stopped and started:\ng = g = (n ** 2 for n in range(12)) for n in g: print(n, end=\u0026quot; \u0026quot;) if n \u0026gt; 30: break print(\u0026quot;\\nDoing something in between...\u0026quot;) for n in g: print(n, end=\u0026quot; \u0026quot;)  0 1 4 9 16 25 36 Doing something in between... 49 64 81 100 121  This is useful when working with collections of data files on disk; it means that you can quite easily analyze them in batches, letting the generator keep track of which ones you have yet to see.\nGenerator Functions: Using yield # list comprehension L1 = [n * 2 for n in range(5)] L2 = [] for n in range(5): L2.append(n * 2) print(\u0026quot;L1:\u0026quot;, L1) print(\u0026quot;L2:\u0026quot;, L2)  L1: [0, 2, 4, 6, 8] L2: [0, 2, 4, 6, 8]  # generator G1 = (n * 2 for n in range(5)) # generator function def gen(): for n in range(5): yield n * 2 G2 = gen() print(*G1) print(*G2)  0 2 4 6 8 0 2 4 6 8  Example: Prime Number Generator # Generate a list of candidates L = [n for n in range(2, 40)] print(L)  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]  # Remove all multiples of the first value L = [n for n in L if n == L[0] or n % L[0] \u0026gt; 0] print(L)  [2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]  # Remove all multiples of the second value L = [n for n in L if n == L[1] or n % L[1] \u0026gt; 0] print(L)  [2, 3, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37]  If we repeat this procedure enough times on a large enough list, we can generate as many primes as we wish.\nEncapsulate this logic in a generator function:\ndef gen_primes(N): \u0026quot;\u0026quot;\u0026quot; Generate primes up to N \u0026quot;\u0026quot;\u0026quot; primes = set() for n in range(2, N): # print(\u0026quot;n = \u0026quot;, n, \u0026quot;:\u0026quot;, *(n % p \u0026gt; 0 for p in primes)) if all(n % p \u0026gt; 0 for p in primes): primes.add(n) yield n print(*gen_primes(100))  2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97    ","date":1593993600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1593993600,"objectID":"6b16c2b0c26f4860e0ec1639413f8300","permalink":"https://eckotan0804.github.io/notes/python/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/python/","section":"notes","summary":"Source This is the summary of the book \u0026ldquo;A Whirlwind Tour of Python\u0026rdquo; by Jake VanderPlas.\nYou can view it in\n nbviewer: A whirlwind Tour of Python, or Github: A whirlwind Tour of Python  import this  The Zen of Python, by Tim Peters Beautiful is better than ugly.","tags":null,"title":"Getting Started","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"ed1e60729c7cc12e741de38d29ddb7c6","permalink":"https://eckotan0804.github.io/courses/example/category1/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/category1/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"https://eckotan0804.github.io/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":["Haobin Tan"],"categories":["Blog customization"],"content":"If we follow the official tutorials of Academic to create a course or documentation, the default order of the menu items in the left side-menu is alphabetical. However, it can make more sense if we could customize the order.\nLet\u0026rsquo;s take online course demo as an example. (Take a look at its code in Github repo.)\nOriginally, the left side-menu looks like this:\nWe want to customize the menu like below:\nHow can we do that?\nStep by Step Customization According to Ordering of Tutorial Contents #831, we could do it as follows:\n1.Define parent menu items in config/_default/menus.toml Add the following codes in menu.toml:\n################################ # Courses ################################ [[example]] name = \u0026quot;Example Topic\u0026quot; weight = 10 identifier = \u0026quot;example-topic\u0026quot; [[example]] name = \u0026quot;Another Topic\u0026quot; weight = 20 identifier = \u0026quot;another-topic\u0026quot;  Notice that example is the folder name. If you rename the folder, you have to change example to \u0026lt;newFolderName\u0026gt;. (More see: Menus)\n2. Define parent menus items in config/_default/config.toml Add the following codes in config.toml:\n################################ # Courses ################################ [[menu.example]] name = \u0026quot;Example Topic\u0026quot; weight = 10 identifier = \u0026quot;example-topic\u0026quot; [[menu.example]] name = \u0026quot;Another Topic\u0026quot; weight = 20 identifier = \u0026quot;another-topic\u0026quot;  3. Specify parent menu items in the front matter of each docs/tutorials page In example1.md, we modify the menu parameter in front matter as followings:\nmenu: example: parent: example-topic weight: 1  Note:\n For parent we use the identifier defined in step 2 instead of the parent menu item\u0026rsquo;s name. weight specifies the position of this page under the parent item example-topic  We do the similar thing for example2.md:\nmenu: example: parent: another-topic weight: 1  That\u0026rsquo;s it! Now the menu is exactly what we want!\n","date":1594080000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594080000,"objectID":"08c2f1bcf0665c64c6bf410056e0ae88","permalink":"https://eckotan0804.github.io/post/hugo-academic/customize-left-menu-order/","publishdate":"2020-07-07T00:00:00Z","relpermalink":"/post/hugo-academic/customize-left-menu-order/","section":"post","summary":"Step by step left side-menu customization","tags":["hugo-academic"],"title":"Customizing the Order of Left Menu Items","type":"post"},{"authors":["Haobin Tan"],"categories":["Coding"],"content":"Passing multiple arguments to a function *args and **kwargs allow you to pass multiple arguments or keyword arguments to a function.\nFor example, we neede to take a various numbers of arguments and compute their sum.\nThe first way is often the most intuitive for people that have experience with collections: simply pass a list or a set of all the arguments to your function.\ndef my_sum(my_integers): result = 0 for x in my_integers: result += x return result list_of_integers = [1, 2, 3] my_sum(list_of_integers)  6  This implementation works, but whenever you call this function you’ll also need to create a list of arguments to pass to it. This can be inconvenient, especially if you don’t know up front all the values that should go into the list. 🤪\nThis is where *args can be really useful, because it allows you to pass a varying number of positional arguments.\ndef my_sum(*args): result = 0 # Iterating over the python `args` tuple for x in args: result += x return result # *args = 1, 2, 3 # -\u0026gt; args = (1, 2, 3) my_sum(1, 2, 3)  6  def print_args(*args): print(args) print_args(1, 2, 3)  (1, 2, 3)  In this example, we’re no longer passing a list to my_sum(). Instead, we’re passing three different positional arguments. my_sum() takes all the parameters that are provided in the input and packs them all into a single iterable object named args.\nThe magic is that we use the unpacking operator (*). The iterable object you’ll get using the unpacking operator * is not a list but a tuple, which is NOT mutable.\nUsing the Python kwargs Variable in Function Definitions **kwargs works just like *args, but instead of accepting positional arguments it accepts keyword (or named) arguments.\nE.g.:\ndef concatenate(**kwargs): result = \u0026quot;\u0026quot; # Iterating over the Python kwargs dictionary for arg in kwargs.values(): result += arg return result print(concatenate(a=\u0026quot;Real\u0026quot;, b=\u0026quot;Python\u0026quot;, c=\u0026quot;Is\u0026quot;, d=\u0026quot;Great\u0026quot;, e=\u0026quot;!\u0026quot;))  RealPythonIsGreat!  Like args, kwargs is just a name that can be changed to whatever you want. Again, what is important here is the use of the unpacking operator (**).\nNote: If we iterate over the dictionary and want to return its values, we must use .values(). Otherwise it will iterates over the keys of the kwargs dictionary.\nOrdering Arguments in a Function The correct order for parameters is:\n Standard arguments *args arguments **kwargs arguments  E.g.:\n# correct def my_function(a, b, *args, **kwargs): pass  Unpacking With the Asterisk Operators: * \u0026amp; ** In short, the unpacking operators are operators that unpack the values from iterable objects in Python. The single asterisk operator * can be used on any iterable that Python provides, while the double asterisk operator ** can only be used on dictionaries.\n* The * operator works on any iterable object.\nFor example:\nmy_list = [1, 2, 3] print(my_list)  [1, 2, 3]  THe list is printed, along with the corresponding brackets and commas.\nNow try to prepend the unpacking operator * to the name of the list:\nprint(*my_list)  1 2 3  Here, the * operator tells print() to unpack the list first.\nIn this case, the output is no longer the list itself, but rather the content of the list. The difference is: Instead of a list, print() has taken three separate arguments as the input.\nAnother thing should be noticed is that we used the unpacking operator * to call a function, instead of in a function definition. In this case, print() takes all the items of a list as though they were single arguments.\nOther convenient uses of the unpacking operator E.g. 1 Split a list into three different parts: The output should show the first value, the last value, and all the values in between.\nWith the unpacking operator, we can do this in just one line of code:\nmy_list = [1, 2, 3, 4, 5, 6] a, *b, c = my_list print(a) print(b) print(c)  1 [2, 3, 4, 5] 6  E.g. 2 Merge two lists:\nlist_1 = [1, 2, 3] list_2 = [4, 5, 6] merged_list = [*list_1, *list_2] merged_list  [1, 2, 3, 4, 5, 6]  For strings In Python, strings are iterable objects. So the * operators can also be used to unpack a string.\nE.g.:\na = [*'HelloWorld'] a  ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']  The previous example seems great, but when you work with these operators it’s important to keep in mind the seventh rule of The Zen of Python by Tim Peters: Readability counts!\nConsider the following example:\n*a, = 'HelloWorld' a  ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']  There’s the unpacking operator *, followed by a variable, a comma, and an assignment. That’s a lot packed into one line! In fact, this code is no different from the previous example. It just takes the string HelloWorld and assigns all the items to the new list a, thanks to the unpacking operator *.\nThe comma after the a does the trick. When you use the unpacking operator with variable assignment, Python requires that your resulting variable is either a list or a tuple. With the trailing comma, you have actually defined a tuple with just one named variable a.\nWhile this is a neat trick, many Pythonistas would not consider this code to be very readable. As such, it’s best to use these kinds of constructions sparingly.\n** The ** operator works similarly as *, but only for dictionary.\nmy_first_dict = {\u0026quot;A\u0026quot;: 1, \u0026quot;B\u0026quot;: 2} my_second_dict = {\u0026quot;C\u0026quot;: 3, \u0026quot;D\u0026quot;: 4} my_merged_dict = {**my_first_dict, **my_second_dict} my_merged_dict  {'A': 1, 'B': 2, 'C': 3, 'D': 4}  ","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"336b434ed6c9f086e03721a27c6787b3","permalink":"https://eckotan0804.github.io/notes/python/py-basics/args_and_kwargs/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/python/py-basics/args_and_kwargs/","section":"notes","summary":"Passing multiple arguments to a function *args and **kwargs allow you to pass multiple arguments or keyword arguments to a function.\nFor example, we neede to take a various numbers of arguments and compute their sum.","tags":["Python","Basics"],"title":"args and kwargs","type":"docs"},{"authors":["Haobin Tan"],"categories":["Coding"],"content":"Source: How to Write Beautiful Python Code With PEP 8\nNaming Conventions  “Explicit is better than implicit.” — The Zen of Python\n ‼️ Note: Never use l (\\ell), O (zero), or I (capital i) single letter names as these can be mistaken for 1 and 0, depending on typeface:\nNaming styles How to choose names The best way to name your objects in Python is to use descriptive names to make it clear what the object represents.\nAlways try to use the most concise but descriptive names possible.\n❌\n# Not recommended \u0026gt;\u0026gt;\u0026gt; x = 'John Smith' \u0026gt;\u0026gt;\u0026gt; y, z = x.split() \u0026gt;\u0026gt;\u0026gt; print(z, y, sep=', ') 'Smith, John'  ✅\n\u0026gt;\u0026gt;\u0026gt; # Recommended \u0026gt;\u0026gt;\u0026gt; name = 'John Smith' \u0026gt;\u0026gt;\u0026gt; first_name, last_name = name.split() \u0026gt;\u0026gt;\u0026gt; print(last_name, first_name, sep=', ') 'Smith, John'  Code Layout  “Beautiful is better than ugly.” — The Zen of Python\n Blank lines Surround top-level functions and classes with two blank lines\nExample:\nclass MyFirstClass: pass class MySecondClass: pass def top_level_function(): return None  Surround method definitions inside classes with a single blank line.\nExample:\ndef first_method(self): return None def second_method(self): return None  Use blank lines sparingly inside functions to show clear steps.\nExample:\ndef calculate_variance(number_list): sum_list = 0 for number in number_list: sum_list = sum_list + number mean = sum_list / len(number_list) sum_squares = 0 for number in number_list: sum_squares = sum_squares + number**2 mean_squares = sum_squares / len(number_list) return mean_squares - mean**2  Maximum Line Length and Line Breaking Lines should be limited to 79 characters.\nOutlines ways to allow statements to run over several lines:\n  Assume line continuation if code is contained within parentheses, brackets, or braces:\ndef function(arg_one, arg_two, arg_three, arg_four): return arg_one    Use backslashes to break lines if it is impossible to use implied continuation:\nfrom mypkg import example1, \\\\ example2, example3    if you can use implied continuation, then you should do so.\n  If line breaking needs to occur around binary operators, like + and *, it should occur before the operator\n❌\n# Not Recommended total = (first_variable + second_variable - third_variable)  ✅\n# Recommended total = (first_variable + second_variable - third_variable)      Indentation  Use 4 consecutive spaces to indicate indentation. Prefer spaces over tabs.  Indentation Following Line Breaks When you’re using line continuations to keep lines to under 79 characters, it is useful to use indentation to improve readability. It allows the reader to distinguish between two lines of code and a single line of code that spans two lines.\nThere are two styles of indentation you can use:\n  align the indented block with the opening delimiter:\ndef function(arg_one, arg_two, arg_three, arg_four): return arg_one  Sometimes only 4 spaces are needed to align with the opening delimiter. This will often occur in if statements that span multiple lines as the if, space, and opening bracket make up 4 characters. In this case, it can be difficult to determine where the nested code block inside the if statement begins:\nExample:\nx = 5 if (x \u0026gt; 3 and x \u0026lt; 10): print(x)  In this case, PEP 8 provides two alternatives to help improve readability:\n  Add a comment after the final condition.\nx = 5 if (x \u0026gt; 3 and x \u0026lt; 10): # Both conditions satisfied print(x)    Add extra indentation on the line continuation:\nx = 5 if (x \u0026gt; 3 and x \u0026lt; 10): print(x)      hanging indent: You can use a hanging indent to visually represent a continuation of a line of code.\nExample:\nvar = function( arg_one, arg_two, arg_three, arg_four)  ‼️ When you’re using a hanging indent, there must not be any arguments on the first line. The following example is not PEP 8 compliant:\nvar = function(arg_one, arg_two, arg_three, arg_four)    When using a hanging indent, add extra indentation to distinguish the continued line from code contained inside the function.\n❌\n# Not Recommended def function( arg_one, arg_two, arg_three, arg_four): return arg_one  Instead, it’s better to use a double indent on the line continuation. This helps you to distinguish between function arguments and the function body, improving readability:\n✅\n# Recommended def function( arg_one, arg_two, arg_three, arg_four): return arg_one      Where to Put the Closing Brace Two options for the position of the closing brace in implied line continuations:\n  Line up the closing brace with the first non-whitespace character of the previous line:\nlist_of_numbers = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]    Line up the closing brace with the first character of the line that starts the construct:\nlist_of_numbers = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]    Consistency is key, try to stick to one of the above methods.\nComments and Documentations See: Documenting Python Code\nWhitespace in Expressions and Statements  “Sparse is better than dense.”— The Zen of Python\n Whitespace Around Binary Operators Surround the following binary operators with a single space on either side:\n Assignment operators (=, +=, -=, and so forth) Comparisons (==, !=, \u0026gt;, \u0026lt;. \u0026gt;=, \u0026lt;=) and (is, is not, in, not in) Booleans (and, not, or)  ‼️ Note:\n  When = is used to assign a default value to a function argument, do NOT surround it with spaces.\n✅\n# Recommended def function(default_parameter=5): # ...  ❌\n# Not recommended def function(default_parameter = 5): # ...    If there\u0026rsquo;s more than one operator in a statement, only add whitespace around the operators with the lowest priority. especially when performing mathematical manipulation.\n✅\n# Recommended y = x**2 + 5 z = (x+y) * (x-y)  ❌\n# Not recommended y = x ** 2 + 5 z = (x + y) * (x - y)    Apply this rule to if statements where there are multiple conditions:\n✅\n# Recommended if x\u0026gt;5 and x%2==0: print('x is larger than 5 and divisible by 2!')  ❌\n# Not recommended if x \u0026gt; 5 and x % 2 == 0: print('x is larger than 5 and divisible by 2!')    In slices, colons act as a binary operators. Therefore, the rules outlined in the previous section apply, and there should be the same amount of whitespace either side. The following examples of list slices are valid:\n  list[3:4] # Treat the colon as the operator with lowest priority list[x+1 : x+2] # In an extended slice, both colons must be # surrounded by the same amount of whitespace list[3:4:5] list[x+1 : x+2 : x+3] # The space is omitted if a slice parameter is omitted list[x+1 : x+2 :]    Summary Surround most operator with whitespace, except:\n in function arguments combining multiple operators in one statement  Programming Recommendations  “Simple is better than complex.”— The Zen of Python\n 🎯 Goal: readability and simplicity\nDon’t compare boolean values to True or False using the equivalence operator. ❌\n# Not recommended my_bool = 6 \u0026gt; 5 if my_bool == True: return '6 is bigger than 5'  ✅\n# Recommended if my_bool: return '6 is bigger than 5'  Use the fact that empty sequences are falsy in if statements. In Python any empty list, string, or tuple is falsy.\n❌\n# Not recommended my_list = [] if not len(my_list): print('List is empty!')  ✅\n# Recommended my_list = [] if not my_list: print('List is empty!')  Use is not rather than not ... is in if statements. ❌\n# Not recommended if not x is None: return 'x exists!'  ✅\n# Recommended if x is not None: return 'x exists!'  Don’t use if x: when you mean if x is not None:. ❌\n# Not recommended if arg: # Do something with arg...  ✅\n# Recommended if arg is not None: # Do something with arg...  Use .startswith() and .endswith() instead of slicing.   prefix\n❌\n# Not recommended if word[:3] == 'cat': print('The word starts with \u0026quot;cat\u0026quot;')  ✅\n# Recommended if word.startswith('cat'): print('The word starts with \u0026quot;cat\u0026quot;')    suffix\n❌\n# Not recommended if file_name[-3:] == 'jpg': print('The file is a JPEG')  ✅\n# Recommended if file_name.endswith('jpg'): print('The file is a JPEG')    Tips and Tricks to Help Ensure Your Code Follows PEP 8 Never ignore PEP 8!!!\nLinters Linters are programs that analyze code and flag errors. They provide suggestions on how to fix the error.\nBest linters for Python code:\n   pycodestyle is a tool to check your Python code against some of the style conventions in PEP 8.\nInstall pycodestyle using pip:\n$ pip install pycodestyle     flake8 is a tool that combines a debugger, pyflakes, with pycodestyle.\nInstall flake8 using pip:\n$ pip install flake8    Autoformatters Autoformatters are programs that refactor your code to conform with PEP 8 automatically. Once such program is black, which autoformats code following most of the rules in PEP 8.\nInstall black using pip. It requires Python 3.6+ to run:\n$ pip install black  ","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"c113ed38da67f78f0e5b1da225238bbc","permalink":"https://eckotan0804.github.io/notes/python/best-practice/beautiful-py-code-with-pep8/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/python/best-practice/beautiful-py-code-with-pep8/","section":"notes","summary":"Source: How to Write Beautiful Python Code With PEP 8\nNaming Conventions  “Explicit is better than implicit.” — The Zen of Python\n ‼️ Note: Never use l (\\ell), O (zero), or I (capital i) single letter names as these can be mistaken for 1 and 0, depending on typeface:","tags":["Python","Best practice"],"title":"Beautiful Python Code with PEP 8","type":"docs"},{"authors":["Haobin Tan"],"categories":["Machine Learning"],"content":"TL;DR     Resaon Example affect Model\u0026rsquo;s complexity ⬆️ Model\u0026rsquo;s complexity ⬇️     Bias wrong assumption assume a quadratic model to be linear underfitting ⬇️ ⬆️   Variance excessive sensitivity to small variations high-degree polynomial model overfitting ⬆️ ⬇️   Inreducible error noisy data        Explaination A model’s generalization error can be expressed as the sum of three very different errors:\nBias This part of the generalization error is due to wrong assumptions, such as assuming that the data is linear when it is actually quadratic. A high-bias model is most likely to underfit the training data.\nVariance This part is due to the model’s excessive sensitivity to small variations in the training data.\nA model with many degrees of freedom (such as a high-degree polynomial model) is likely to have high variance, and thus to overfit the training data.\nIrreducible Error This part is due to the noisiness of the data itself. The only way to reduce this part of the error is to clean up the data (e.g., fix the data sources, such as broken sensors, or detect and remove outliers).\n    High bias Low bias     High variance something is terribly wrong! 😭 Overfitting   Low variance Underfitting too good to be true! 🤪    ","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"ea2856a8236773194a90e18bd90a3355","permalink":"https://eckotan0804.github.io/notes/machine-learning/model-selection/bias-variance-tradeoff/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/machine-learning/model-selection/bias-variance-tradeoff/","section":"notes","summary":"TL;DR     Resaon Example affect Model\u0026rsquo;s complexity ⬆️ Model\u0026rsquo;s complexity ⬇️     Bias wrong assumption assume a quadratic model to be linear underfitting ⬇️ ⬆️   Variance excessive sensitivity to small variations high-degree polynomial model overfitting ⬆️ ⬇️   Inreducible error noisy data        Explaination A model’s generalization error can be expressed as the sum of three very different errors:","tags":["ML","Model Selection"],"title":"Bias Variance Tradeoff","type":"docs"},{"authors":["Haobin Tan"],"categories":["Coding"],"content":"Source: Documenting Python Code: A Complete Guide\nCommenting vs. Documenting Code     Description Audience     Commenting Purpose and design of code Maintainers and developers   Documenting Use and functionality of code Users    Commenting Code Comments are created in Python using the pound sign (#) and should be brief statements no longer than a few sentences.\ndef hello_world(): # A simple comment preceding a simple print statement print(\u0026quot;Hello World!\u0026quot;)  According to PEP 8, comments should have a maximum length of 72 characters. This is true even if your project changes the max line length to be greater than the recommended 80 characters.\ndef hello_long_world(): # A very long statement that just goes on and on and on and on and # never ends until after it's reached the 80 char limit print(\u0026quot;Hellooooooooooooooooooooooooooooooooooooooooooooooooooooooo World\u0026quot;)  Purpose of Commenting Code   Planning and reviewing When developing new portion of code, first use comments as a way of planning or outlineing that section of code. Remember to remove these comments once the actual coding has been implemented and reviewed/tested\ndef new_function(): # Step 1 # Step 2 # Step 3    Code description Explain the intent of specific sections of code\n  Algorithmic description When algorithms are used, especially complicated ones, it can be useful to explain how the algorithm works or how it’s implemented within your code.\n# Using quick sort for performance gains    Tagging: The use of tagging can be used to label specific sections of code where known issues or areas of improvement are located. Some examples are: BUG, FIXME, and TODO.\n# TODO: Add condition for when val is None###    Rules of Commenting  Should be kept brief and focused Avoid using long comments when possible  Essential rules as suggested by Jeff Atwood:\n Keep comments as close to the code being described as possible. Don’t use complex formatting (such as tables or ASCII figures). Don’t include redundant information. Assume the reader of the code has a basic understanding of programming principles and language syntax. Design your code to comment itself. 💪  Commenting Code via Type Hinting (Python 3.5+) Type hinting was added to Python 3.5 and is an additional form to help the readers of your code.\nExample\ndef hello_name(name: str) -\u0026gt; str: return (\u0026quot;Hello {name}\u0026quot;)  You can immediately tell that\n the function expects the input name to be of a type str, or string. the expected output of the function will be of a type str, or string, as well.  Documenting Code Base using Docstrings Docstings Background Docstrings are built-in strings that, when configured correctly, can help your users and yourself with your project’s documentation.\nPython also has the built-in function help() that prints out the objects docstring to the console.\nExample:\ndef say_hello(name): \u0026quot;\u0026quot;\u0026quot;A simple function that says hello\u0026quot;\u0026quot;\u0026quot; print(f\u0026quot;Hello {name})  \u0026gt;\u0026gt;\u0026gt; help(say_hello) Help on function say_hello in module __main__: say_hello(name) A simple function that says hello  Docstring Types Docstring conventions:\n Are described within PEP 257 Purpose: provide your users with a brief overview of the object. Should be kept concise enough to be easy to maintain but still be elaborate enough for new users to understand their purpose and how to use the documented object.  In all cases, the docstrings should use the triple-double quote (\u0026quot;\u0026quot;\u0026quot;) string format. This should be done whether the docstring is multi-lined or not.\nAt a bare minimum, a docstring should be a quick summary of whatever is it you’re describing and should be contained within a single line:\n\u0026quot;\u0026quot;\u0026quot;This is a quick summary line used as a description of the object.\u0026quot;\u0026quot;\u0026quot;  Multi-lined docstrings are used to further elaborate on the object beyond the summary. All multi-lined docstrings have the following parts:\n A one-line summary line A blank line proceeding the summary Any further elaboration for the docstring Another blank line  \u0026quot;\u0026quot;\u0026quot;This is the summary line This is the further elaboration of the docstring. Within this section, you can elaborate further on details as appropriate for the situation. Notice that the summary and the elaboration is separated by a blank new line. \u0026quot;\u0026quot;\u0026quot; # Notice the blank line above. Code should continue on this line.  All docstrings should have the same max character length as comments (72 characters).\nThree major categories:\n Class Docstrings: Class and class methods Package and Module Docstrings: Package, modules, and functions Script Docstrings: Script and functions  Class Docstrings class SimpleClass: \u0026quot;\u0026quot;\u0026quot;Class docstrings go here.\u0026quot;\u0026quot;\u0026quot; def say_hello(self, name: str): \u0026quot;\u0026quot;\u0026quot;Class method docstrings go here.\u0026quot;\u0026quot;\u0026quot; print(f'Hello {name}')  Class docstrings should contain the following information:\n A brief summary of its purpose and behavior Any public methods, along with a brief description Any class properties (attributes) Anything related to the interface for subclassers, if the class is intended to be subclassed  The class constructor parameters should be documented within the __init__ class method docstring.\nIndividual methods should be documented using their individual docstrings. Class method docstrings should contain the following:\n A brief description of what the method is and what it’s used for Any arguments (both required and optional) that are passed including keyword arguments Label any arguments that are considered optional or have a default value Any side effects that occur when executing the method Any exceptions that are raised Any restrictions on when the method can be called  Example:\nclass Animal: \u0026quot;\u0026quot;\u0026quot; A class used to represent an Animal ... Attributes ---------- says_str : str a formatted string to print out what the animal says name : str the name of the animal sound : str the sound that the animal makes num_legs : int the number of legs the animal has (default 4) Methods ------- says(sound=None) Prints the animals name and what sound it makes \u0026quot;\u0026quot;\u0026quot; says_str = \u0026quot;A {name} says {sound}\u0026quot; def __init__(self, name, sound, num_legs=4): \u0026quot;\u0026quot;\u0026quot; Parameters ---------- name : str The name of the animal sound : str The sound the animal makes num_legs : int, optional The number of legs the animal (default is 4) \u0026quot;\u0026quot;\u0026quot; self.name = name self.sound = sound self.num_legs = num_legs def says(self, sound=None): \u0026quot;\u0026quot;\u0026quot;Prints what the animals name is and what sound it makes. If the argument `sound` isn't passed in, the default Animal sound is used. Parameters ---------- sound : str, optional The sound the animal makes (default is None) Raises ------ NotImplementedError If no sound is set for the animal or passed in as a parameter. \u0026quot;\u0026quot;\u0026quot; if self.sound is None and sound is None: raise NotImplementedError(\u0026quot;Silent Animals are not supported!\u0026quot;) out_sound = self.sound if sound is None else sound print(self.says_str.format(name=self.name, sound=out_sound))  Package and Module Docstrings Package Docstrings:\n Should be placed at the top of the package’s __init__.py file Should list the modules and sub-packages that are exported by the package  Module Docstrings:\n Placed at the top of the file even before any imports Should include:  A brief description of the module and its purpose A list of any classes, exception, functions, and any other objects exported by the module Docstring for a module function should include the same items as a class method    Script Docstrings Scripts: single file executables run from the console.\nDocstrings for scripts:\n Placed at the top of the file should be documented well enough for users to be able to have a sufficient understanding of how to use the script Should be usable for its “usage” message, when the user incorrectly passes in a parameter or uses the -h option  Any custom or third-party imports should be listed within the docstrings to allow users to know which packages may be required for running the script\nExample:\n\u0026quot;\u0026quot;\u0026quot;Spreadsheet Column Printer This script allows the user to print to the console all columns in the spreadsheet. It is assumed that the first row of the spreadsheet is the location of the columns. This tool accepts comma separated value files (.csv) as well as excel (.xls, .xlsx) files. This script requires that `pandas` be installed within the Python environment you are running this script in. This file can also be imported as a module and contains the following functions: * get_spreadsheet_cols - returns the column headers of the file * main - the main function of the script \u0026quot;\u0026quot;\u0026quot; import argparse import pandas as pd def get_spreadsheet_cols(file_loc, print_cols=False): \u0026quot;\u0026quot;\u0026quot;Gets and prints the spreadsheet's header columns Parameters ---------- file_loc : str The file location of the spreadsheet print_cols : bool, optional A flag used to print the columns to the console (default is False) Returns ------- list a list of strings used that are the header columns \u0026quot;\u0026quot;\u0026quot; file_data = pd.read_excel(file_loc) col_headers = list(file_data.columns.values) if print_cols: print(\u0026quot;\\n\u0026quot;.join(col_headers)) return col_headers def main(): parser = argparse.ArgumentParser(description=__doc__) parser.add_argument( 'input_file', type=str, help=\u0026quot;The spreadsheet file to pring the columns of\u0026quot; ) args = parser.parse_args() get_spreadsheet_cols(args.input_file, print_cols=True) if __name__ == \u0026quot;__main__\u0026quot;: main()  Docstring Formats Some of the most common formats are the following:\n   Formatting Type Description Supported by Sphynx Formal Specification      Google docstrings Google’s recommended form of documentation Yes No    reStructured Text Official Python documentation standard; Not beginner friendly but feature rich Yes Yes    NumPy/SciPy docstrings NumPy’s combination of reStructured and Google Docstrings Yes Yes    Epytext A Python adaptation of Epydoc; Great for Java developers Not officially Yes    The selection of the docstring format is up to you, but you should stick with the same format throughout your document/project. The following are examples of each type to give you an idea of how each documentation format looks.\n","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"f25bc124f7494b3bc1ace5e5fcb8393f","permalink":"https://eckotan0804.github.io/notes/python/best-practice/documenting-py-code/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/python/best-practice/documenting-py-code/","section":"notes","summary":"Source: Documenting Python Code: A Complete Guide\nCommenting vs. Documenting Code     Description Audience     Commenting Purpose and design of code Maintainers and developers   Documenting Use and functionality of code Users    Commenting Code Comments are created in Python using the pound sign (#) and should be brief statements no longer than a few sentences.","tags":["Python","Best practice"],"title":"Documenting Python Code","type":"docs"},{"authors":["Haobin Tan"],"categories":["Machine Learning"],"content":"Linear Regression Model A linear model makes a prediction $\\hat{y}_i$ by simply computing a weighted sum of the input $\\boldsymbol{x}_i$, plus a constant $w_0$ called the bias term:\nFor single sample/instances $$ \\hat{y}_i = f \\left( \\boldsymbol{x} \\right) = w_0 + \\sum_{j=1}^{D}w_{j} x_{i, j} $$\nIn matrix-form:\n$$ \\hat{y}_{i}=w_{0}+ \\displaystyle \\sum_{j=1}^{D} w_{j} x_{i, j}=\\tilde{\\boldsymbol{x}}_{i}^{T} \\boldsymbol{w}\n$$\n  $\\tilde{\\boldsymbol{x}}_{i} = \\left[\\begin{array}{c}{1} \\\\ {x_{i}}\\end{array}\\right] = \\left[\\begin{array}{c} {1} \\\\ x_{i, 1} \\\\ \\vdots \\\\ {x_{i, D}}\\end{array}\\right] \\in \\mathbb{R}^{D+1}$\n  $\\boldsymbol{w}=\\left[\\begin{array}{c}{w_{0}} \\\\ {\\vdots} \\\\ {w_{D}}\\end{array}\\right] \\in \\mathbb{R}^{D+1}$\n  On full dataset $$ \\hat{\\boldsymbol{y}}=\\left[\\begin{array}{c}{\\hat{y}_{1}} \\\\{\\vdots} \\\\ {\\hat{y}_{n}}\\end{array}\\right]=\\left[\\begin{array}{c}{\\tilde{\\boldsymbol{x}}_{1}^{T} \\boldsymbol{w}} \\\\ {\\vdots} \\\\ {\\tilde{\\boldsymbol{x}}_{n}^{T} \\boldsymbol{w}}\\end{array}\\right] = \\underbrace{\\left[\\begin{array}{cc}{1} \u0026amp; {\\boldsymbol{x}_{1}^{T}} \\\\ {\\vdots} \u0026amp; {\\vdots} \\\\ {1} \u0026amp; {\\boldsymbol{x}_{n}^{T}}\\end{array}\\right]}_{=: \\boldsymbol{X}} \\boldsymbol{w} = \\boldsymbol{X} \\boldsymbol{w} $$\n $\\hat{\\boldsymbol{y}}$: vector containing the output for each sample $\\boldsymbol{X}$: data-matrix containing a vector of ones as the first column as bias   $y=\\underbrace{\\begin{bmatrix}{\\widehat y}_1 \\\\ \\vdots\\\\{\\widehat y}_n\\end{bmatrix}}_{\\boldsymbol\\in\\mathbf ℝ^{n\\times1}}=\\begin{bmatrix}\\widehat x_1^Tw\\\\\\vdots\\\\\\widehat x_n^Tw\\end{bmatrix}=\\begin{bmatrix}1\\cdot w_0+x_{1,1}\\cdot w_1+\\cdots+x_{1,D}\\cdot w_D\\\\\\vdots\\\\1\\cdot w_0+x_{n,1}\\cdot w_1+\\cdots+x_{n,D}\\cdot w_D\\end{bmatrix}=\\underset{=\\begin{bmatrix}1\u0026amp;x_1^T\\\\\\vdots\u0026amp;\\vdots\\\\1\u0026amp;x_n^T\\end{bmatrix}\\\\=:\\boldsymbol X\\in\\mathbb{R}^{n\\times(1+D)}}{\\underbrace{\\begin{bmatrix}1\u0026amp;x_{1,1}\u0026amp;\\cdots\u0026amp;x_{1,D}\\\\\\vdots\u0026amp;\\vdots\u0026amp;\\ddots\u0026amp;\\vdots\\\\1\u0026amp;x_{n,1}\u0026amp;\\cdots\u0026amp;x_{n,D}\\end{bmatrix}}\\cdot}\\underbrace{\\begin{bmatrix}w_0\\\\w_1\\\\\\vdots\\\\w_D\\end{bmatrix}}_{=:\\boldsymbol w\\boldsymbol\\in\\mathbf ℝ^{\\boldsymbol(\\mathbf1\\boldsymbol+\\mathbf D\\boldsymbol)\\boldsymbol\\times\\mathbf1}}$\n ","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"ef5a4cc75ffc3d7d7af3dda617d01d84","permalink":"https://eckotan0804.github.io/notes/machine-learning/regression/linear-regression/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/machine-learning/regression/linear-regression/","section":"notes","summary":"Linear Regression Model A linear model makes a prediction $\\hat{y}_i$ by simply computing a weighted sum of the input $\\boldsymbol{x}_i$, plus a constant $w_0$ called the bias term:\nFor single sample/instances $$ \\hat{y}_i = f \\left( \\boldsymbol{x} \\right) = w_0 + \\sum_{j=1}^{D}w_{j} x_{i, j} $$","tags":["ML","Regression"],"title":"Linear Regression","type":"docs"},{"authors":["Haobin Tan"],"categories":["Machine Learning"],"content":"How does the objective function look like? Objective function:\n$$ \\operatorname{Obj}(\\Theta)= \\overbrace{L(\\Theta)}^{\\text {Training Loss}} + \\underbrace{\\Omega(\\Theta)}_{\\text{Regularization}} $$\n  Training loss: measures how well the model fit on training data $$ L=\\sum_{i=1}^{n} l\\left(y_{i}, g_{i}\\right) $$\n Square loss: $$ l(y_i, \\hat{y}_i) = (y_i - \\hat{y}_i)^2 $$ Logistic loss: $$ l(y_i, \\hat{y}_i) = y_i \\log(1 + e^{-\\hat{y}_i}) + (1 - y_i) \\log(1 + e^{\\hat{y}_i}) $$    Regularization: How complicated is the model?\n $L_2$ norm (Ridge): $\\omega(w) = \\lambda |w|^2$ $L_1$ norm (Lasso): $\\omega(w) = \\lambda |w|$        Objective Function Linear model? Loss Regularization     Ridge regression $\\sum_{i=1}^{n}\\left(y_{i}-w^{\\top} x_{i}\\right)^{2}+\\lambda|w|^{2}$ ✅ square $L_2$   Lasso regression $\\sum_{i=1}^{n}\\left(y_{i}-w^{\\top} x_{i}\\right)^{2}+\\lambda|w|$ ✅ square $L_2$   Logistic regression $\\sum_{i=1}^{n}\\left[y_{i} \\cdot \\ln \\left(1+e^{-w^{\\top} x_{i}}\\right)+\\left(1-y_{i}\\right) \\cdot \\ln \\left(1+e^{w^{\\top} x_{i}}\\right)\\right]+\\lambda|w|^{2}$ ✅ logistic $L_1$    Why do we want to contain two component in the objective?   Optimizing training loss encourages predictive models\n Fitting well in training data at least get you close to training data which is hopefully close to the underlying distribution    Optimizing regularization encourages simple models\n Simpler models tends to have smaller variance in future predictions, making prediction stable    ","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"80cf1bf53d2566c055e8cebd2c47a9a2","permalink":"https://eckotan0804.github.io/notes/machine-learning/model-selection/objective-function/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/machine-learning/model-selection/objective-function/","section":"notes","summary":"Objective function overview","tags":["ML","Model Selection"],"title":"Objective Function","type":"docs"},{"authors":["Haobin Tan"],"categories":["Coding"],"content":"zip(): creates an iterator that will aggregate elements from two or more iterables.\nAccording to the official documentation, Python’s zip() function behaves as follows:\n Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator.\n Python zip operations work just like the physical zipper on a bag or pair of jeans. Interlocking pairs of teeth on both sides of the zipper are pulled together to close an opening.\nUse zip() in python zip(*iterables):\n  takes in iterables as arguments and returns an iterator\n  generates a series of tuples containing elements from each iterable\n  can accept any type of iterable, such as files, lists, tuples, dictionaries, sets, and so on.\n  Pass n arguments\n# Pass n arguments numbers = [1, 2, 3] letters = ['a', 'b', 'c'] upper_letters = ['A', 'B', 'C'] zipped = zip(numbers, letters, upper_letters)  zipped  \u0026lt;zip at 0x62479ae08\u0026gt;  list(zipped)  [(1, 'a', 'A'), (2, 'b', 'B'), (3, 'c', 'C')]  num_tuple = (1, 2) lettet_tuple = ('a', 'b') upper_letter_tuple = ('A', 'B') list(zip(num_tuple, lettet_tuple, upper_letter_tuple))  [(1, 'a', 'A'), (2, 'b', 'B')]  Pass no arguments\n# Passing no argument zipped = zip()  zipped  \u0026lt;zip at 0x62473c908\u0026gt;  list(zipped)  []  Pass one arguments\n# Pass one argument zipped = zip(numbers) list(zipped)  [(1,), (2,), (3,)]  Pass arguments of unequal length:\nthe number of elements that zip() puts out will be equal to the length of the shortest iterable. The remaining elements in any longer iterables will be totally ignored by zip()\nlist(zip(range(5), range(100)))  [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]  If trailing or unmatched values are important, then use itertools.zip_longest() instead of zip()\nfrom itertools import zip_longest longest = range(5) zipped = zip_longest(numbers, letters, longest, fillvalue='?')  list(zipped)  [(1, 'a', 0), (2, 'b', 1), (3, 'c', 2), ('?', '?', 3), ('?', '?', 4)]   Loop Over Multiple Iterables Looping over multiple iterables is one of the most common use cases for Python’s zip() function\nTraverse lists in parallel letters  ['a', 'b', 'c']  numbers  [1, 2, 3]  for l,n in zip(letters, numbers): print(f'letter: {l}') print(f'number: {n} \\n')  letter: a number: 1 letter: b number: 2 letter: c number: 3  Traverse dictionaries in parallel dict_one = {'name': 'John', 'last_name': 'Doe', 'job': 'Python Consultant'} dict_two = {'name': 'Jane', 'last_name': 'Doe', 'job': 'Community Manager'} for (k1, v1), (k2, v2) in zip(dict_one.items(), dict_two.items()): print(k1, '-\u0026gt;', v1) print(k2, '-\u0026gt;', v2, '\\n')  name -\u0026gt; John name -\u0026gt; Jane last_name -\u0026gt; Doe last_name -\u0026gt; Doe job -\u0026gt; Python Consultant job -\u0026gt; Community Manager  Unzip a sequence zip(*zipped)\nnumbers  [1, 2, 3]  letters  ['a', 'b', 'c']  zipped = zip(numbers, letters)  zipped_list = list(zipped) zipped_list  [(1, 'a'), (2, 'b'), (3, 'c')]  We have a list of tuples and want to separate the elements of each tuple into independent sequences. To do this, we can use zip() along with the unpacking operator *,\nlist(zip(*zipped_list))  [(1, 2, 3), ('a', 'b', 'c')]  nums = [1, 2, 3]nums = [1, 2, 3]letters = [\u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo;, \u0026lsquo;C\u0026rsquo;]letters = [\u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo;, \u0026lsquo;C\u0026rsquo;]zipped_list = list(zip(nums, letters))zipped_list = list(zip(nums, letters))223311AABBCCzipped_listzipped_list223311'A''A''B''B''C''C'223311'A''A''B''B''C''C'(((((()))))),,,,,,[[]]zipped_listzipped_listzip(*zipped_list)zip(*zipped_list)223311'A''A''B''B''C''C'((((((,,,,,,))))))223311'A''A''B''B''C''C'((((((,,,,,,))))))zip/\ncombinezip/\u0026hellip;zip/\ncombinezip/\u0026hellip;223311'A''A''B''B''C''C'zipzipunzipunzipViewer does not support full SVG 1.1\nSorting in parallel Combine two lists and sort them at the same time.\nnumbers = [2, 4, 3, 1]  letters = ['b', 'a', 'd', 'c']  data1 = list(zip(numbers, letters)) data1  [(2, 'b'), (4, 'a'), (3, 'd'), (1, 'c')]  data1.sort() # sort by numbers data1  [(1, 'c'), (2, 'b'), (3, 'd'), (4, 'a')]  data2 = list(zip(letters, numbers)) data2  [('b', 2), ('a', 4), ('d', 3), ('c', 1)]  data2.sort() # sort by letters data2  [('a', 4), ('b', 2), ('c', 1), ('d', 3)]  Use sorted() and zip() together to achieve a similar result\ndata = sorted(zip(letters, numbers)) data  [('a', 4), ('b', 2), ('c', 1), ('d', 3)]  Calculating in pairs total_sales = [52000.00, 51000.00, 48000.00] prod_cost = [46800.00, 45900.00, 43200.00] for sales, costs in zip(total_sales, prod_cost): profit = sales - costs print(f'Profit: {profit}')  Profit: 5200.0 Profit: 5100.0 Profit: 4800.0  Building Dictionaries fields = ['name', 'last_name', 'age', 'job'] values = ['John', 'Doe', '45', 'Python Developer'] a_dict = dict(zip(fields, values))  a_dict  {'name': 'John', 'last_name': 'Doe', 'age': '45', 'job': 'Python Developer'}  Update an existing dictionary by combining zip() with dict.update().\nnew_job = ['Python Consultant'] field = ['job'] a_dict.update(zip(field, new_job)) a_dict  {'name': 'John', 'last_name': 'Doe', 'age': '45', 'job': 'Python Consultant'}  ","date":1593993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593993600,"objectID":"75306a447691b3e29459f0c536fcb1fb","permalink":"https://eckotan0804.github.io/notes/python/py-basics/zip/","publishdate":"2020-07-06T00:00:00Z","relpermalink":"/notes/python/py-basics/zip/","section":"notes","summary":"zip(): creates an iterator that will aggregate elements from two or more iterables.\nAccording to the official documentation, Python’s zip() function behaves as follows:\n Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.","tags":["Python","Basics"],"title":"zip","type":"docs"},{"authors":["Haobin Tan"],"categories":["Others"],"content":"Heading 2 Emphasis Italics\nBold\nStrikethrough\nList Ordered  First item Second item  Unordered  First item  Item 1.1  Item 1.1.1      TODO  Write code  Images Emojis See the Emoji cheat sheet for available emoticons.\nExample:\nI : heart : Academic : smile :  I ❤️ Academic 😄\nQuote Block quote \u0026gt; This is a blockquote.   This is a blockquote\n Highlight quote This is a highlighted quote.  This is a highlighted quote.\nFootnotes I have more 1 to say.\nDiagrams Flowchart graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D;  Sequence diagram sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good!  Create diagram using draw.io  Create diagram in draw.io Embed in Academic by choosing File \u0026gt; Embed \u0026gt; SVG in the draw.io editor and pasting the generated code into your page.  Code highlighting print('Hello World!')  Math Inline math: $\\nabla F(\\mathbf{x}_{n})$\nMath block: $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left |\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right |^2} $$\n$$ \\begin{aligned} x \u0026amp;= (3 * 4) + 5 \\\\\n\u0026amp;= 12 + 5 \\\\\n\u0026amp;= 17 \\end{aligned} $$\nTable    Command Description     hugo Build your website.   hugo serve -w View your website.    Asides Asides are a useful feature that add side content such as notes, hints, or warnings to your articles. They are especially handy when writing educational tutorial-style articles or documentation.\nNote  A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Warning  Here\u0026rsquo;s some important information\u0026hellip;     Footnote example \u0026#x21a9;\u0026#xfe0e;\n   ","date":1593877432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593877432,"objectID":"149146edb9d37107f2905b865ce6ae17","permalink":"https://eckotan0804.github.io/post/hello-world/","publishdate":"2020-07-04T17:43:52+02:00","relpermalink":"/post/hello-world/","section":"post","summary":"The very FIRST post","tags":["Hello world"],"title":"Hello World","type":"post"}]